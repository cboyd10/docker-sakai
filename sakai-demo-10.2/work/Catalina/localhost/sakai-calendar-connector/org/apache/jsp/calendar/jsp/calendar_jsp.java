/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.53
 * Generated at: 2015-06-08 03:29:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.calendar.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

 List<String> rtlLangs = Arrays.asList(new String[]{new Locale("ar").getLanguage(), new Locale("fa").getLanguage(), new Locale("iw").getLanguage(), new Locale("ji").getLanguage(), new Locale("ku").getLanguage(), new Locale("ur").getLanguage()});

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!--\n");
      out.write("Title: Tigra Calendar\n");
      out.write("URL: http://www.softcomplex.com/products/tigra_calendar/\n");
      out.write("Version: 3.2\n");
      out.write("Date: 10/14/2002 (mm/dd/yyyy)\n");
      out.write("Feedback: feedback@softcomplex.com (specify product title in the subject)\n");
      out.write("Note: Permission given to use this script in ANY kind of applications if\n");
      out.write("   header lines are left unchanged.\n");
      out.write("Note: Script consists of two files: calendar?.js and calendar.html\n");
      out.write("About us: Our company provides offshore IT consulting services.\n");
      out.write("    Contact us at sales@softcomplex.com if you have any programming task you\n");
      out.write("    want to be handled by professionals. Our typical hourly rate is $20.\n");
      out.write("-->\n");

	Locale locale = null;
	String localeString = request.getParameter("locale");
	if (localeString != null) {
		String[] params = localeString.split("_", 3);
		if (params.length == 1) {
			locale = new Locale(params[0]);
		} else if (params.length == 2) {
			locale = new Locale(params[0], params[1]);
		} else if (params.length == 3) {
			locale = new Locale(params[0], params[1], params[2]);
		}
	}
	if (locale == null) {
		locale = Locale.getDefault();
	}
	boolean isRtl = rtlLangs.contains(locale.getLanguage());

	String[] weekdays = DateFormatSymbols.getInstance(locale).getShortWeekdays();
	String [] months = DateFormatSymbols.getInstance(locale).getMonths();
	Date date;
	try {
		Long datetime = Long.valueOf(request.getParameter("datetime"));
		date = new Date(datetime);
	} catch (NumberFormatException e) {
		// datetime is null or illegal.
		date = new Date();
	}
	ResourceBundle rb = ResourceBundle.getBundle("calendar", locale);
	String format = rb.getString("cal.format");
	String dateString = new SimpleDateFormat(format, locale).format(date);

      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<title>");
      out.print( rb.getString("cal.title") );
      out.write("</title>\n");
      out.write("<style>");

	if (isRtl) {
		out.print("\n\tbody {direction: rtl;}");
	}
      out.write("\n");
      out.write("\ttd {font-family: Tahoma, Verdana, sans-serif; font-size: 12px;}\n");
      out.write("</style>\n");
      out.write("<script language=\"JavaScript\">\n");
      out.write("\n");
      out.write("// months as they appear in the calendar's title\n");
      out.write("var ARR_MONTHS = [\"");
      out.print( months[0] );
      out.write("\", \"");
      out.print( months[1] );
      out.write("\", \"");
      out.print( months[2] );
      out.write("\", \"");
      out.print( months[3] );
      out.write("\", \"");
      out.print( months[4] );
      out.write("\", \"");
      out.print( months[5] );
      out.write("\", \"");
      out.print( months[6] );
      out.write("\", \"");
      out.print( months[7] );
      out.write("\", \"");
      out.print( months[8] );
      out.write("\", \"");
      out.print( months[9] );
      out.write("\", \"");
      out.print( months[10] );
      out.write("\", \"");
      out.print( months[11] );
      out.write("\"];\n");
      out.write("// week day titles as they appear on the calendar\n");
      out.write("var ARR_WEEKDAYS = [\"");
      out.print( weekdays[1] );
      out.write("\", \"");
      out.print( weekdays[2] );
      out.write("\", \"");
      out.print( weekdays[3] );
      out.write("\", \"");
      out.print( weekdays[4] );
      out.write("\", \"");
      out.print( weekdays[5] );
      out.write("\", \"");
      out.print( weekdays[6] );
      out.write("\", \"");
      out.print( weekdays[7] );
      out.write("\"];\n");
      out.write("// day week starts from (normally 0-Su or 1-Mo)\n");
      out.write("var NUM_WEEKSTART = ");
      out.print( Calendar.getInstance(locale).getFirstDayOfWeek() - 1 );
      out.write(";\n");
      out.write("// path to the directory where calendar images are stored. trailing slash req.\n");
      out.write("var STR_ICONPATH = '/library/calendar/images/calendar/';\n");
      out.write("\n");
      out.write("var re_url = new RegExp('datetime=(\\\\-?\\\\d+)');\n");
      out.write("var dt_current = (re_url.exec(String(window.location))\n");
      out.write("\t? new Date(new Number(RegExp.$1)) : new Date());\n");
      out.write("var re_id = new RegExp('id=(\\\\d+)');\n");
      out.write("var num_id = (re_id.exec(String(window.location))\n");
      out.write("\t? new Number(RegExp.$1) : 0);\n");
      out.write("var obj_caller = (window.opener ? window.opener.calendars[num_id] : null);\n");
      out.write("\n");
      out.write("if (obj_caller && obj_caller.year_scroll) {\n");
      out.write("\t// get same date in the previous year\n");
      out.write("\tvar dt_prev_year = new Date(dt_current);\n");
      out.write("\tdt_prev_year.setFullYear(dt_prev_year.getFullYear() - 1);\n");
      out.write("\tif (dt_prev_year.getDate() != dt_current.getDate())\n");
      out.write("\t\tdt_prev_year.setDate(0);\n");
      out.write("\t\n");
      out.write("\t// get same date in the next year\n");
      out.write("\tvar dt_next_year = new Date(dt_current);\n");
      out.write("\tdt_next_year.setFullYear(dt_next_year.getFullYear() + 1);\n");
      out.write("\tif (dt_next_year.getDate() != dt_current.getDate())\n");
      out.write("\t\tdt_next_year.setDate(0);\n");
      out.write("}\n");
      out.write("\n");
      out.write("// get same date in the previous month\n");
      out.write("var dt_prev_month = new Date(dt_current);\n");
      out.write("dt_prev_month.setMonth(dt_prev_month.getMonth() - 1);\n");
      out.write("if (dt_prev_month.getDate() != dt_current.getDate())\n");
      out.write("\tdt_prev_month.setDate(0);\n");
      out.write("\n");
      out.write("// get same date in the next month\n");
      out.write("var dt_next_month = new Date(dt_current);\n");
      out.write("dt_next_month.setMonth(dt_next_month.getMonth() + 1);\n");
      out.write("if (dt_next_month.getDate() != dt_current.getDate())\n");
      out.write("\tdt_next_month.setDate(0);\n");
      out.write("\n");
      out.write("// get first day to display in the grid for current month\n");
      out.write("var dt_firstday = new Date(dt_current);\n");
      out.write("dt_firstday.setDate(1);\n");
      out.write("dt_firstday.setDate(1 - (7 + dt_firstday.getDay() - NUM_WEEKSTART) % 7);\n");
      out.write("\n");
      out.write("// function passing selected date to calling window\n");
      out.write("function set_datetime(n_datetime, b_close) {\n");
      out.write("\tif (!obj_caller) return;\n");
      out.write("\n");
      out.write("\tvar dt_datetime = obj_caller.prs_time(\n");
      out.write("\t\t(document.cal ? document.cal.time.value : ''),\n");
      out.write("\t\tnew Date(n_datetime)\n");
      out.write("\t);\n");
      out.write("\n");
      out.write("\tif (!dt_datetime) return;\n");
      out.write("\tif (b_close) {\n");
      out.write("\t\tobj_caller.target.value = (document.cal\n");
      out.write("\t\t\t? obj_caller.gen_tsmp(dt_datetime)\n");
      out.write("\t\t\t: obj_caller.gen_date(dt_datetime)\n");
      out.write("\t\t);\n");
      out.write("\t\t// %%% JANDERSE Added callback function\n");
      out.write("\t\tif (obj_caller.callback) obj_caller.callback();\n");
      out.write("\t\twindow.close();\n");
      out.write("\t}\n");
      out.write("\telse \n");
      out.write("\t{\n");
      out.write("\t\tobj_caller.popup(dt_datetime.valueOf());\n");
      out.write("\t\t// %%% JANDERSE Added callback function\n");
      out.write("\t\tif (obj_caller.callback) obj_caller.callback();\n");
      out.write("\t}\n");
      out.write("}\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body bgcolor=\"#FFFFFF\" marginheight=\"5\" marginwidth=\"5\" topmargin=\"5\" leftmargin=\"5\" rightmargin=\"5\">\n");
      out.write("<table class=\"clsOTable\" cellspacing=\"0\" border=\"0\" width=\"100%\">\n");
      out.write("<tr><td bgcolor=\"#4682B4\">\n");
      out.write("<table cellspacing=\"1\" cellpadding=\"3\" border=\"0\" width=\"100%\">\n");
      out.write("<tr><td colspan=\"7\"><table cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"100%\">\n");
      out.write("<tr>\n");
      out.write("<script language=\"JavaScript\">\n");
      out.write("document.write(\n");
      out.write("'<td>'+(obj_caller&&obj_caller.year_scroll?'<a href=\"javascript:set_datetime('+dt_prev_year.valueOf()+')\"><img src=\"'+STR_ICONPATH+'");

	if (isRtl) {
		out.print("next_year.gif");
	} else {
		out.print("prev_year.gif");
	}

      out.write("\" width=\"16\" height=\"16\" border=\"0\" alt=\"");
      out.print( rb.getString("cal.lasy") );
      out.write("\"></a>&nbsp;':'')+'<a href=\"javascript:set_datetime('+dt_prev_month.valueOf()+')\"><img src=\"'+STR_ICONPATH+'");

	if (isRtl) {
		out.print("next.gif");
	} else {
		out.print("prev.gif");
	}

      out.write("\" width=\"16\" height=\"16\" border=\"0\" alt=\"");
      out.print( rb.getString("cal.lasm") );
      out.write("\"></a></td>'+\n");
      out.write("'<td align=\"center\" width=\"100%\"><font color=\"#ffffff\">");
      out.print( dateString );
      out.write("</font></td>'+\n");
      out.write("'<td><a href=\"javascript:set_datetime('+dt_next_month.valueOf()+')\"><img src=\"'+STR_ICONPATH+'");

	if (isRtl) {
		out.print("prev.gif");
	} else {
		out.print("next.gif");
	}

      out.write("\" width=\"16\" height=\"16\" border=\"0\" alt=\"");
      out.print( rb.getString("cal.nexm") );
      out.write("\"></a>'+(obj_caller && obj_caller.year_scroll?'&nbsp;<a href=\"javascript:set_datetime('+dt_next_year.valueOf()+')\"><img src=\"'+STR_ICONPATH+'");

	if (isRtl) {
		out.print("prev_year.gif");
	} else {
		out.print("next_year.gif");
	}

      out.write("\" width=\"16\" height=\"16\" border=\"0\" alt=\"");
      out.print( rb.getString("cal.nexy") );
      out.write("\"></a>':'')+'</td>'\n");
      out.write(");\n");
      out.write("</script>\n");
      out.write("</tr>\n");
      out.write("</table></td></tr>\n");
      out.write("<tr>\n");
      out.write("<script language=\"JavaScript\">\n");
      out.write("\n");
      out.write("// print weekdays titles\n");
      out.write("for (var n=0; n<7; n++)\n");
      out.write("\tdocument.write('<td bgcolor=\"#87cefa\" align=\"center\"><font color=\"#ffffff\">'+ARR_WEEKDAYS[(NUM_WEEKSTART+n)%7]+'</font></td>');\n");
      out.write("document.write('</tr>');\n");
      out.write("\n");
      out.write("// print calendar table\n");
      out.write("var dt_current_day = new Date(dt_firstday);\n");
      out.write("while (dt_current_day.getMonth() == dt_current.getMonth() ||\n");
      out.write("\tdt_current_day.getMonth() == dt_firstday.getMonth()) {\n");
      out.write("\t// print row heder\n");
      out.write("\tdocument.write('<tr>');\n");
      out.write("\tfor (var n_current_wday=0; n_current_wday<7; n_current_wday++) {\n");
      out.write("\t\tif (dt_current_day.getDate() == dt_current.getDate() &&\n");
      out.write("\t\t\tdt_current_day.getMonth() == dt_current.getMonth())\n");
      out.write("\t\t\t// print current date\n");
      out.write("\t\t\tdocument.write('<td bgcolor=\"#ffb6c1\" align=\"center\" width=\"14%\">');\n");
      out.write("\t\telse if (dt_current_day.getDay() == 0 || dt_current_day.getDay() == 6)\n");
      out.write("\t\t\t// weekend days\n");
      out.write("\t\t\tdocument.write('<td bgcolor=\"#dbeaf5\" align=\"center\" width=\"14%\">');\n");
      out.write("\t\telse\n");
      out.write("\t\t\t// print working days of current month\n");
      out.write("\t\t\tdocument.write('<td bgcolor=\"#ffffff\" align=\"center\" width=\"14%\">');\n");
      out.write("\n");
      out.write("\t\tdocument.write('<a href=\"javascript:set_datetime('+dt_current_day.valueOf() +', true);\">');\n");
      out.write("\n");
      out.write("\t\tif (dt_current_day.getMonth() == this.dt_current.getMonth())\n");
      out.write("\t\t\t// print days of current month\n");
      out.write("\t\t\tdocument.write('<font color=\"#000000\">');\n");
      out.write("\t\telse \n");
      out.write("\t\t\t// print days of other months\n");
      out.write("\t\t\tdocument.write('<font color=\"#606060\">');\n");
      out.write("\t\t\t\n");
      out.write("\t\tdocument.write(dt_current_day.getDate()+'</font></a></td>');\n");
      out.write("\t\tdt_current_day.setDate(dt_current_day.getDate()+1);\n");
      out.write("\t}\n");
      out.write("\t// print row footer\n");
      out.write("\tdocument.write('</tr>');\n");
      out.write("}\n");
      out.write("if (obj_caller && obj_caller.time_comp)\n");
      out.write("\tdocument.write('<form onsubmit=\"javascript:set_datetime('+dt_current.valueOf()+', true)\" name=\"cal\"><tr><td colspan=\"7\" bgcolor=\"#87CEFA\"><font color=\"White\" face=\"tahoma, verdana\" size=\"2\">Time: <input type=\"text\" name=\"time\" value=\"'+obj_caller.gen_time(this.dt_current)+'\" size=\"8\" maxlength=\"8\"></font></td></tr></form>');\n");
      out.write("</script>\n");
      out.write("</table></tr></td>\n");
      out.write("</table>\n");
      out.write("</body>\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
