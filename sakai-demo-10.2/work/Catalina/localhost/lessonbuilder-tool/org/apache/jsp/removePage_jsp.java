/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.53
 * Generated at: 2015-06-08 03:29:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.sakaiproject.lessonbuildertool.tool.beans.SimplePageBean;
import org.sakaiproject.tool.cover.ToolManager;
import org.sakaiproject.user.cover.UserDirectoryService;
import org.sakaiproject.user.api.User;
import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.api.Tool;
import org.sakaiproject.tool.api.ToolSession;
import org.sakaiproject.tool.api.ActiveTool;
import org.sakaiproject.tool.cover.ToolManager;
import org.sakaiproject.authz.cover.SecurityService;
import org.sakaiproject.tool.cover.SessionManager;
import org.sakaiproject.tool.cover.ActiveToolManager;
import org.sakaiproject.id.cover.IdManager;
import org.sakaiproject.authz.cover.AuthzGroupService;
import org.sakaiproject.time.api.Time;
import org.sakaiproject.time.api.TimeBreakdown;
import org.sakaiproject.time.cover.TimeService;
import org.sakaiproject.site.api.Site;
import org.sakaiproject.site.api.SitePage;
import org.sakaiproject.site.cover.SiteService;
import org.sakaiproject.site.api.SiteService.SortType;
import org.sakaiproject.site.api.SiteService.SelectionType;
import org.sakaiproject.site.api.ToolConfiguration;
import org.sakaiproject.authz.api.Member;
import org.sakaiproject.event.api.NotificationService;
import org.sakaiproject.authz.api.SecurityAdvisor;
import org.sakaiproject.component.cover.ComponentManager;
import org.sakaiproject.lessonbuildertool.model.SimplePageToolDao;
import org.sakaiproject.event.cover.EventTrackingService;
import org.sakaiproject.component.cover.ServerConfigurationService;
import org.sakaiproject.lessonbuildertool.SimplePage;
import org.apache.commons.lang.StringEscapeUtils;

public final class removePage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("\n");






























































      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n");
      out.write("<META HTTP-EQUIV=\"CACHE-CONTROL\" CONTENT=\"NO-CACHE\"/>\n");
      out.write("<script type=\"text/javascript\" language=\"JavaScript\" src=\"/library/js/headscripts.js\"></script>\n");
      out.write("<link href=\"/library/skin/tool_base.css\" type=\"text/css\" rel=\"stylesheet\" media=\"all\" />\n");
      out.write("<link href=\"/library/skin/default/tool.css\" type=\"text/css\" rel=\"stylesheet\" media=\"all\" />\n");
      out.write("<link rel=\"stylesheet\" href=\"../css/Simplepagetool.css\" type=\"text/css\"/>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");


    // called from remove page to do the actual removal. We can't use
    // normal RSF because after removing the tool it will try to return to
    // a non-existent RSF context.
    //
    // called by
    //  https://heidelberg.rutgers.edu/sakai-lessonbuildertool-tool/removePage?page=330&site=2da97547-7031-4bca-8f18-c6f9517016b9
    // for security verify that we own the site and that the page is in the site
    // error messages should be impossible, so we're not internationalizing them

    SimplePageToolDao dao = (SimplePageToolDao)ComponentManager
    .get(SimplePageToolDao.class);

    String siteId = request.getParameter("site");
    Site site = null;
    try {
        site = SiteService.getSite(siteId);
    } catch (Exception e) {
	out.println(StringEscapeUtils.escapeHtml(e.toString()));
	return;
    }

    Session s = SessionManager.getCurrentSession();
    if (s == null) {
	out.println("no session. this must be called from within Sakai");
	return;
    }

    String userId = s.getUserId();
    String siteReference = SiteService.siteReference(siteId);

    if (!(SecurityService.unlock(userId, SiteService.SECURE_UPDATE_SITE, siteReference) ||
	  SecurityService.isSuperUser())) {
	out.println(StringEscapeUtils.escapeHtml("sorry, you aren't allowed to update this site " + userId + " " + siteReference));
	return;
    }

    String removeId = request.getParameter("page");

    SimplePage simplePage = dao.getPage(Long.parseLong(removeId));
		
    if (simplePage == null) {
	out.println("No such page");
	return;
    }

    if (!simplePage.getSiteId().equals(siteId)) {
	out.println("Specified page not in current site");
	return;
    }

    if(simplePage.getOwner() != null) {
	out.println("Can't remove student pages this way");
	return;
    }
    
    SitePage sitePage = site.getPage(simplePage.getToolId());
    if (sitePage == null) {
	out.println(StringEscapeUtils.escapeHtml("removePage can't find site page for " + simplePage.getPageId()));
	return;
    }
    
    site.removePage(sitePage);
		
    try {
	SiteService.save(site);
    } catch (Exception e) {
	out.println(StringEscapeUtils.escapeHtml("removePage unable to save site " + e));
    }
		
    EventTrackingService.post(EventTrackingService.newEvent("lessonbuilder.remove", "/lessonbuilder/page/" + simplePage.getPageId(), true));

   out.println("<script>parent.location.replace(parent.location)</script>");


      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
